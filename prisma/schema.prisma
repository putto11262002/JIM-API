generator client {
  provider = "prisma-client-js"
  // output = "../packages/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF_ROOT
  STAFF_ADMIN
  STAFF_GENERAL
}

model Staff {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  username  String    @unique
  password  String
  role      StaffRole
  logout    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  color     String
  jobs      Job[]
}

enum StaffRole {
  ADMIN
  GENERAL
  ROOT
}

enum ModelApplicationStatus {
  PENDING
  ACCEPTED
  ARCHIVED
}

model ModelApplicationExperience {
  id            String           @id @default(uuid())
  applicationId String
  application   ModelApplication @relation(fields: [applicationId], references: [id])
  year          String
  media         String
  country       String
  product       String
  details       String?
}

model ModelApplicationImage {
  fileId        String           @id()
  type          String
  caption       String?
  url           String
  height        Int
  width         Int
  application   ModelApplication @relation(fields: [applicationId], references: [id])
  applicationId String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ModelApplication {
  id            String                       @id @default(uuid())
  firstName     String
  lastName      String
  phoneNumber   String
  email         String
  lineId        String?
  wechat        String?
  facebook      String?
  instagram     String?
  whatsapp      String?
  dateOfBirth   DateTime
  gender        String
  nationality   String
  ethnicity     String
  address       String
  city          String
  region        String
  zipCode       String
  country       String
  experiences   ModelApplicationExperience[]
  talents       String[]
  aboutMe       String?
  height        String
  weight        String
  bust          String
  hips          String
  suitDressSize String
  shoeSize      String
  eyeColor      String
  hairColor     String
  // profileImage ModelImage @relation(fields: [profileImageId], references: [id])
  // profileImageId String
  images        ModelApplicationImage[]
  status        ModelApplicationStatus       @default(PENDING)
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
}

enum ModelImageType {
  POLAROID
  BOOK
  COMPOSITE
}

model ModelImage {
  id        String   @id @default(uuid())
  caption   String?
  profile   Boolean  @default(false)
  type      ModelImageType
  url       String
  fileId    String
  width    Int
  height    Int 
  model     Model    @relation(fields: [modelId], references: [id])
  modelId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModelExperience {
  id      String  @id @default(uuid())
  modelId String
  model   Model   @relation(fields: [modelId], references: [id])
  year    String
  media   String
  country String
  product String
  details String?
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model Model {
  id                           String            @id @default(uuid())
  // firstName                    String
  // lastName                     String
  name                         String
  nickname                     String?
  phoneNumber                  String?
  email                        String?
  lineId                       String?
  whatsapp                     String?
  wechat                       String?
  instagram                    String?
  facebook                     String?
  dateOfBirth                  DateTime?
  gender                       Gender
  nationality                  String?
  ethnicity                    String?
  countryOfResidence           String?
  spokenLanguages              String[]
  passportNumber               String?
  idCardNumber                 String?
  taxId                        String?
  occupation                   String?
  highestLevelOfEducation      String?
  address                      String?
  city                         String?
  region                       String?
  zipCode                      String?
  country                      String?
  talents                      String[]
  aboutMe                      String?
  medicalBackground            String?
  tattoos                      String?
  scars                        String?
  underwareShooting            Boolean?
  emergencyContactName         String?
  emergencyContactPhoneNumber  String?
  emergencyContactRelationship String?
  height                       String?
  weight                       String?
  bust                         String?
  collar                       String?
  aroundArmpit                 String?
  aroundArmToWrist1            String?
  aroundArmToWrist2            String?
  aroundArmToWrist3            String?
  armLength1                   String?
  armLength2                   String?
  aroundThickToAnkle           String?
  trousersLength               String?
  chestHeight                  String?
  chestWidth                   String?
  waist                        String?
  hips                         String?
  shoulder                     String?
  frontShoulder                String?
  frontLength                  String?
  backShoulder                 String?
  backLength                   String?
  crotch                       String?
  braSize                      String?
  suitDressSize                String?
  shoeSize                     String?
  hairColor                    String?
  eyeColor                     String?
  images                       ModelImage[]
  experiences                  ModelExperience[]
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  Job                          Job[]
  Booking                      Booking[]
  Block                        Block[]
  public                       Boolean @default(false)
  tags                         String[]
}

model Option {
  id String @id @default(uuid())
}

model ApplicationFile {
  id        String   @id @default(uuid())
  path      String
  url       String
  mimetype  String
  size      Int
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ARCHIVED
  CANCELED
}

model Booking {
  id        String   @id @default(uuid())
  models    Model[]
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  start     DateTime
  end       DateTime
  type      String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobStatus {
  PENDING
  CONFIRMED
  ARCHIVED
  // CANCELED
}

model Job {
  id                  String    @id @default(uuid())
  title               String
  client              String
  clientAddress       String?
  personInCharge      String?
  mediaReleased       String?
  periodReleased      String?
  territoriesReleased String?
  models              Model[]
  workingHour         String?
  venueOfShoot        String?
  feeAsAgreed         String?
  overtimePerHour     String?
  termsOfPayment      String?
  cancellationFee     String?
  contractDetails     String?
  createdBy           Staff     @relation(fields: [createdById], references: [id])
  createdById         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  bookings            Booking[]
  status              JobStatus
}

model Block {
  id        String   @id @default(uuid())
  start     DateTime
  end       DateTime
  models    Model[]
  reason    String?
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
